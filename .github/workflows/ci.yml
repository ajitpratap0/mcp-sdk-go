name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'  # Match go.mod version
          cache: true

      # Manual installation instead of using the golangci-lint-action to have more control
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.8
          golangci-lint --version

      # Force all dependencies to be downloaded and compiled before linting
      - name: Force dependency resolution
        run: |
          go mod tidy
          go mod download
          go test -run=^$ ./... || true  # Compiles test dependencies without running tests
          go build -o /dev/null ./... || true  # Additional way to force module resolution

      # Explicitly install testify since it's a common cause of linting issues
      - name: Ensure testify is available
        run: go get github.com/stretchr/testify@v1.8.4

      - name: Lint
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          golangci-lint run --timeout=5m -v --out-format=colored-line-number

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24.2']
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'  # Match go.mod version
          cache: true

      - name: Build
        run: go build -v ./...

  verify-formatting:
    name: Verify Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'  # Match go.mod version
          cache: true

      - name: Verify gofmt
        run: |
          gofmt_output=$(gofmt -l .)
          if [ -n "$gofmt_output" ]; then
            echo "The following files are not formatted properly:"
            echo "$gofmt_output"
            exit 1
          fi
