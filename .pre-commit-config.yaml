# Comprehensive pre-commit configuration for Model Context SDK
# This replaces both the legacy bash script and the previous pre-commit config

default_language_version:
  python: python3

fail_fast: false

repos:
  # Standard file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=500']
      - id: detect-private-key
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: check-executables-have-shebangs

  # Go-specific hooks using local tools
  - repo: local
    hooks:
      # === CORE COMMIT CHECKS (Run on every commit) ===

      # Code formatting
      - id: go-fmt
        name: Go Format
        description: Run gofmt on all Go files
        entry: gofmt -l -w
        language: system
        types: [go]
        pass_filenames: true

      # Import organization
      - id: go-imports
        name: Go Imports
        description: Run goimports to format and organize imports
        entry: bash -c 'export PATH=$PATH:$(go env GOPATH)/bin && goimports -l -w $(find . -type f -name "*.go" -not -path "./vendor/*")'
        language: system
        types: [go]
        pass_filenames: false

      # Dependency management - from legacy bash script
      - id: go-mod-tidy
        name: Go Mod Tidy
        description: Run go mod tidy to ensure clean dependencies
        entry: bash -c 'make tidy'
        language: system
        pass_filenames: false
        always_run: true

      # Build verification - from legacy bash script
      - id: go-build
        name: Go Build
        description: Verify that the code builds
        entry: make build
        language: system
        pass_filenames: false

      # Linting with auto-install
      - id: golangci-lint
        name: Go Linting
        description: Run golangci-lint with project configuration
        entry: bash -c 'export PATH=$PATH:$(go env GOPATH)/bin && golangci-lint run --timeout=5m -v'
        language: system
        pass_filenames: false
        types: [go]
        verbose: true

      # === TRANSPORT-SPECIFIC CHECKS (Run on relevant file changes) ===

      # Transport interface compliance - critical for BaseTransport embedding
      - id: transport-interface-check
        name: Transport Interface Check
        description: Ensure all transport implementations adhere to the Transport interface
        entry: bash -c 'go test -run TestTransportInterface ./pkg/transport/...'
        language: system
        files: '^pkg/transport/.*\.go$'
        pass_filenames: false
        verbose: true

      # JSON-RPC compliance for protocol implementation
      - id: jsonrpc-check
        name: JSON-RPC Compliance
        description: Verify JSON-RPC message format compliance
        entry: bash -c 'go test -run TestJSONRPC ./pkg/protocol/...'
        language: system
        files: '^pkg/(protocol|transport)/.*\.go$'
        pass_filenames: false

      # === HEAVIER CHECKS (Run post-commit) ===

      # Tests with race detection
      - id: go-test
        name: Go Test
        description: Run tests with race detection
        entry: make test
        language: system
        pass_filenames: false
        stages: [post-commit]

      # Security scanning with auto-install
      - id: gosec
        name: Go Security Check
        description: Run gosec security scanner
        entry: bash -c 'export PATH=$PATH:$(go env GOPATH)/bin && gosec ./...'
        language: system
        pass_filenames: false
        stages: [post-commit]

      # Vulnerability checking with auto-install
      - id: govulncheck
        name: Go Vulnerability Check
        description: Run vulnerability scanning
        entry: bash -c 'export PATH=$PATH:$(go env GOPATH)/bin && govulncheck ./...'
        language: system
        pass_filenames: false
        stages: [post-commit]
